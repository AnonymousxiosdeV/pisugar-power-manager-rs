name: Master

on:
  push:
    branches: [master]

jobs:
  build-all:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fix cargo config
        run: sed -e "s/.*replace-with.*//g" -i .cargo/config

      # Nodejs npm cache
      - name: Nodejs npm cache
        uses: actions/cache@v1
        env:
          cache-name: cache-node-npm
        with:
          path: |
            ~/.npm
            electron/node_modules
            electron/dist
          key: ${{ runner.os }}-build-${{ env.cache-name }}
      # Nodejs
      - name: Setup Nodejs
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      # Nodejs dependencies
      - run: npm install
        working-directory: electron
      # Nodejs build web
      - run: npm run build:web
        working-directory: electron

      # Rust cache
      - name: Rust cargo cache
        uses: actions/cache@v1
        env:
          cache-name: cache-rust-cargo
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-build-${{ env.cache-name }}
      # Rust musl cross cache arm
      - name: Rust musl cache
        uses: actions/cache@v1
        env:
          cache-name: cache-rust-musl
        with:
          path: |
            /opt/arm-linux-musleabi-cross
            /opt/arm-linux-musleabihf-cross
            /opt/aarch64-linux-musl-cross
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      # Rust musl cross toolchain
      - name: Rust musl cross toolchain arm
        run: |
          if ! test -d /opt/arm-linux-musleabi-cross/bin; then
            wget https://more.musl.cc/$(uname -m)-linux-musl/arm-linux-musleabi-cross.tgz
            tar -xvf arm-linux-musleabi-cross.tgz
            mv arm-linux-musleabi-cross /opt/
          fi
          echo /opt/arm-linux-musleabi-cross/bin >> $GITHUB_PATH
      - name: Rust musl cross toolchain armhf
        run: |
          if ! test -d /opt/arm-linux-musleabihf-cross/bin; then
            wget https://more.musl.cc/$(uname -m)-linux-musl/arm-linux-musleabihf-cross.tgz
            tar -xvf arm-linux-musleabihf-cross.tgz
            mv arm-linux-musleabihf-cross /opt/
          fi
          echo /opt/arm-linux-musleabihf-cross/bin >> $GITHUB_PATH
      - name: Rust musl cross toolchain aarch64
        run: |
          if ! test -d /opt/aarch64-linux-musl-cross/bin; then
            wget https://more.musl.cc/$(uname -m)-linux-musl/aarch64-linux-musl-cross.tgz
            tar -xvf aarch64-linux-musl-cross.tgz
            mv aarch64-linux-musl-cross /opt/
          fi
          echo /opt/aarch64-linux-musl-cross/bin >> $GITHUB_PATH
      # Fix libgcc.a for aarch64
      - run: |
          LIBGCC=$(find /opt/aarch64-linux-musl-cross -name libgcc.a)
          echo $LIBGCC
          sed -e "s|\"/opt/aarch64-linux-musl-cross/.*\"|\"${LIBGCC%/*}\"|" -i .cargo/config
          cat .cargo/config

      # Rust toolchain
      - name: Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      # Rust build release
      - run: |
          sudo apt update && sudo apt install -y rpm
          cargo install cargo-deb
          cargo install cargo-rpm
          for arch in arm-unknown-linux-musleabi arm-unknown-linux-musleabi aarch64-unknown-linux-musl x86_64-unknown-linux-gnu; do
            rustup target add $arch
            cargo build --target $arch --release
            for app in server poseroff programmer; do
              cargo deb --target $arch --manifest-path=pisugar-$app/Cargo.toml
              (cd pisugar-$app && cargo rpm build --target $arch)
            done
          done
      # aur for archlinux
      - run: (cd scripts/aur; sh build-aur.sh)

      - run: find $(pwd) -name '*.deb'
      - run: find $(pwd) -name '*.rpm'

      # Upload artifact
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pisugar-artifacts
          path: |
            target/arm-unknown-linux-musleabi/debian/*
            target/arm-unknown-linux-musleabihf/debian/*
            target/aarch64-unknown-linux-musl/debian/*
            target/x86_64-unknown-linux-gnu/debian/*
            target/arm-unknown-linux-musleabi/release/rpmbuild/RPMS/armv7l/*
            target/arm-unknown-linux-musleabihf/release/rpmbuild/RPMS/armv7hl/*
            target/aarch64-unknown-linux-musl/release/rpmbuild/RPMS/aarch64/*
            target/x86_64-unknown-linux-gnu/release/rpmbuild/RPMS/x86_64/*
            scripts/*
            scripts/aur/*.tar.gz
          if-no-files-found: warn

      # Development Release
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          title: "Development Build"
          prerelease: true
          draft: false
          files: |
            target/arm-unknown-linux-musleabi/debian/*
            target/arm-unknown-linux-musleabihf/debian/*
            target/aarch64-unknown-linux-musl/debian/*
            target/x86_64-unknown-linux-gnu/debian/*
            target/arm-unknown-linux-musleabi/release/rpmbuild/RPMS/armv7l/*
            target/arm-unknown-linux-musleabihf/release/rpmbuild/RPMS/armv7hl/*
            target/aarch64-unknown-linux-musl/release/rpmbuild/RPMS/aarch64/*
            target/x86_64-unknown-linux-gnu/release/rpmbuild/RPMS/x86_64/*
            scripts/*
            scripts/aur/*.tar.gz

      # Upload QiNiu nightly
      - name: "Upload to QiNiu"
        env:
          QINIU_BUCKET: ${{ secrets.QINIU_BUCKET }}
          QINIU_AK: ${{ secrets.QINIU_AK }}
          QINIU_SK: ${{ secrets.QINIU_SK }}
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip

          if [ $(uname -m) == 'x86_64' ]; then
            wget http://devtools.qiniu.com/qshell-linux-x64-v2.4.1.zip
            unzip qshell-linux-x64-v2.4.1.zip
            mv qshell-linux-x64-v2.4.1 qshell
          else
            wget http://devtools.qiniu.com/qshell-linux-x86-v2.4.1.zip
            unzip qshell-linux-x86-v2.4.1.zip
            mv qshell-linux-x86-v2.4.1 qshell
          fi
          chmod +x qshell
          ./qshell account -w ${QINIU_AK} ${QINIU_SK} deploy-account

          for f in $(find target -type f -name '*.deb') $(find target -type f -name '*.rpm') $(find scripts -name '*.tar.gz'); do
            filename=${f##*/}
            key=nightly/${filename}
            ./qshell rput --overwrite ${QINIU_BUCKET} ${key} ${f}
          done
          for f in $(find scripts -name '*.sh' ); do
            filename=${f##*/}
            key=nightly/${filename}
            ./qshell rput --overwrite --mimetype text/plain ${QINIU_BUCKET} ${key} ${f}
          done
