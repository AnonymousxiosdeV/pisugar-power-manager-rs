name: build-all

on:
  workflow_call:

jobs:
  build-web:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v2

      # Nodejs npm cache
      - name: Nodejs npm cache
        uses: actions/cache@v1
        with:
          path: |
            ~/.npm
            electron/node_modules
            electron/dist
          key: ${{ runner.os }}-build-web

      # Nodejs
      - name: Setup Nodejs
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      # Nodejs dependencies
      - run: npm install
        working-directory: electron

      # Nodejs build web
      - run: npm run build:web
        working-directory: electron

      # Upload artifact
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pisugar-web
          path: |
            electron/dist
          if-no-files-found: warn

#  build-amd64:
#    runs-on: ubuntu-latest
#    needs:
#      - build-web
#    steps:
#      # Checkout
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Fix cargo config
#        run: sed -e "s/.*replace-with.*//g" -i .cargo/config
#
#      # Download web
#      - name: Upload artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: pisugar-web
#          path: |
#            electron/dist
#          if-no-files-found: warn
#
#      # Rust cache
#      - name: Rust cargo cache
#        uses: actions/cache@v1
#        with:
#          path: |
#            ~/.cargo
#            target
#          key: ${{ runner.os }}-build-amd64
#
#      # Rust toolchain
#      - name: Rust toolchain
#        uses: actions-rs/toolchain@v2
#        with:
#          toolchain: stable
#          target: x86_64-unknown-linux-gnu
#
#      # Build
#      - name: Rust build
#      - run: |
#          sudo apt update && sudo apt install -y rpm
#          cargo install cargo-deb
#          cargo install cargo-rpm
#          cargo build --target x86_64-unknown-linux-gnu --release
#          for app in server poweroff programmer; do
#            cargo deb --target x86_64-unknown-linux-gnu --manifest-path=pisugar-$app/Cargo.toml
#            (cd pisugar-$app && cargo rpm build --target x86_64-unknown-linux-gnu)
#          done
#
#      # Upload artifact
#      - name: Upload artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: pisugar-amd64
#          path: |
#            target/x86_64-unknown-linux-gnu
#            !target/**/.fingerprint
#            !target/**/build
#            !target/**/deps
#            !target/**/examples
#            !target/**/incremental
#          if-no-files-found: warn

#  build-arm:
#    runs-on: ubuntu-latest
#    needs:
#      - build-web
#    steps:
#      # Checkout
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Fix cargo config
#        run: sed -e "s/.*replace-with.*//g" -i .cargo/config
#
#      # Download web
#      - name: Upload artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: pisugar-web
#          path: |
#            electron/dist
#          if-no-files-found: warn
#
#      # Rust cache
#      - name: Rust cargo cache
#        uses: actions/cache@v1
#        with:
#          path: |
#            ~/.cargo
#            target
#            /opt/arm-*
#          key: ${{ runner.os }}-build-amd
#
#      - name: Rust musl cross toolchain arm
#        run: |
#          if ! test -d /opt/arm-linux-musleabi-cross/bin; then
#            wget https://more.musl.cc/$(uname -m)-linux-musl/arm-linux-musleabi-cross.tgz
#            tar -xvf arm-linux-musleabi-cross.tgz
#            mv arm-linux-musleabi-cross /opt/
#          fi
#          echo /opt/arm-linux-musleabi-cross/bin >> $GITHUB_PATH
#
#      # Rust toolchain
#      - name: Rust toolchain
#        uses: actions-rs/toolchain@v2
#        with:
#          toolchain: stable
#          target: arm-unknown-linux-musleabi
#
#      # Build
#      - name: Rust build
#      - run: |
#          sudo apt update && sudo apt install -y rpm
#          cargo install cargo-deb
#          cargo install cargo-rpm
#          cargo build --target arm-unknown-linux-musleabi --release
#          for app in server poweroff programmer; do
#            cargo deb --target arm-unknown-linux-musleabi --manifest-path=pisugar-$app/Cargo.toml
#            (cd pisugar-$app && cargo rpm build --target arm-unknown-linux-musleabi)
#          done
#
#      # Upload artifact
#      - name: Upload artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: pisugar-arm
#          path: |
#            target/arm-unknown-linux-musleabi
#            !target/**/.fingerprint
#            !target/**/build
#            !target/**/deps
#            !target/**/examples
#            !target/**/incremental
#          if-no-files-found: warn
#
#  build-armhf:
#    runs-on: ubuntu-latest
#    needs:
#      - build-web
#    steps:
#      # Checkout
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Fix cargo config
#        run: sed -e "s/.*replace-with.*//g" -i .cargo/config
#
#      # Download web
#      - name: Upload artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: pisugar-web
#          path: |
#            electron/dist
#          if-no-files-found: warn
#
#      # Rust cache
#      - name: Rust cargo cache
#        uses: actions/cache@v1
#        with:
#          path: |
#            ~/.cargo
#            target
#            /opt/arm-*
#          key: ${{ runner.os }}-build-amd
#
#      - name: Rust musl cross toolchain armhf
#        run: |
#          if ! test -d /opt/arm-linux-musleabihf-cross/bin; then
#            wget https://more.musl.cc/$(uname -m)-linux-musl/arm-linux-musleabihf-cross.tgz
#            tar -xvf arm-linux-musleabihf-cross.tgz
#            mv arm-linux-musleabihf-cross /opt/
#          fi
#          echo /opt/arm-linux-musleabihf-cross/bin >> $GITHUB_PATH
#
#      # Rust toolchain
#      - name: Rust toolchain
#        uses: actions-rs/toolchain@v2
#        with:
#          toolchain: stable
#          target: arm-unknown-linux-musleabihf
#
#      # Build
#      - name: Rust build
#      - run: |
#          sudo apt update && sudo apt install -y rpm
#          cargo install cargo-deb
#          cargo install cargo-rpm
#          cargo build --target arm-unknown-linux-musleabihf --release
#          for app in server poweroff programmer; do
#            cargo deb --target arm-unknown-linux-musleabihf --manifest-path=pisugar-$app/Cargo.toml
#            (cd pisugar-$app && cargo rpm build --target arm-unknown-linux-musleabihf)
#          done
#
#      # Upload artifact
#      - name: Upload artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: pisugar-armhf
#          path: |
#            target/arm-unknown-linux-musleabihf
#            !target/**/.fingerprint
#            !target/**/build
#            !target/**/deps
#            !target/**/examples
#            !target/**/incremental
#          if-no-files-found: warn
#
#  build-aarch64:
#    runs-on: ubuntu-latest
#    needs:
#      - build-web
#    steps:
#      # Checkout
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Fix cargo config
#        run: sed -e "s/.*replace-with.*//g" -i .cargo/config
#
#      # Download web
#      - name: Upload artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: pisugar-web
#          path: |
#            electron/dist
#          if-no-files-found: warn
#
#      # Rust cache
#      - name: Rust cargo cache
#        uses: actions/cache@v1
#        with:
#          path: |
#            ~/.cargo
#            target
#            /opt/aarch64-*
#          key: ${{ runner.os }}-build-amd
#
#      - name: Rust musl cross toolchain aarch64
#        run: |
#          if ! test -d /opt/aarch64-linux-musl-cross/bin; then
#            wget https://more.musl.cc/$(uname -m)-linux-musl/aarch64-linux-musl-cross.tgz
#            tar -xvf aarch64-linux-musl-cross.tgz
#            mv aarch64-linux-musl-cross /opt/
#          fi
#          echo /opt/aarch64-linux-musl-cross/bin >> $GITHUB_PATH
#      # Fix libgcc.a for aarch64
#      - run: |
#          LIBGCC=$(find /opt/aarch64-linux-musl-cross -name libgcc.a)
#          echo $LIBGCC
#          sed -e "s|\"/opt/aarch64-linux-musl-cross/.*\"|\"${LIBGCC%/*}\"|" -i .cargo/config
#          cat .cargo/config
#
#      # Rust toolchain
#      - name: Rust toolchain
#        uses: actions-rs/toolchain@v2
#        with:
#          toolchain: stable
#          target: aarch64-unknown-linux-musl
#
#      # Build
#      - name: Rust build
#      - run: |
#          sudo apt update && sudo apt install -y rpm
#          cargo install cargo-deb
#          cargo install cargo-rpm
#          cargo build --target aarch64-unknown-linux-musl --release
#          for app in server poweroff programmer; do
#            cargo deb --target aarch64-unknown-linux-musl --manifest-path=pisugar-$app/Cargo.toml
#            (cd pisugar-$app && cargo rpm build --target aarch64-unknown-linux-musl)
#          done
#
#      # Upload artifact
#      - name: Upload artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: pisugar-aarch64
#          path: |
#            target/aarch64-unknown-linux-musl
#            !target/**/.fingerprint
#            !target/**/build
#            !target/**/deps
#            !target/**/examples
#            !target/**/incremental
#          if-no-files-found: warn
#
#  build-all:
#    runs-on: ubuntu-latest
#    needs:
#      - build-web
#      - build-amd64
#      - build-arm
#      - build-armhf
#      - build-aarch64
#    steps:
#      # Checkout
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Fix cargo config
#        run: sed -e "s/.*replace-with.*//g" -i .cargo/config
#
#      - name: Download web
#        uses: actions/download-artifact@v3
#        with:
#          name: pisugar-web
#          path: |
#            electron/dist
#
#      - name: Download amd64
#        uses: actions/download-artifact@v3
#        with:
#          name: pisugar-amd64
#          path: |
#            target/x86_64-unknown-linux-gnu
#
#      - name: Download arm
#        uses: actions/download-artifact@v3
#        with:
#          name: pisugar-arm
#          path: |
#            target/arm-unknown-linux-musleabi
#
#      - name: Download armhf
#        uses: actions/download-artifact@v3
#        with:
#          name: pisugar-armhf
#          path: |
#            target/arm-unknown-linux-musleabihf
#
#      - name: Download aarch64
#        uses: actions/download-artifact@v3
#        with:
#          name: pisugar-aarch64
#          path: |
#            target/aarch64-unknown-linux-musl
#
#      # aur for archlinux
#      - run: (cd scripts/aur; sh build-aur.sh)
#
#      # Upload artifact
#      - name: Upload artifacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: pisugar-all
#          path: |
#            target/arm-unknown-linux-musleabi/debian/*
#            target/arm-unknown-linux-musleabihf/debian/*
#            target/aarch64-unknown-linux-musl/debian/*
#            target/x86_64-unknown-linux-gnu/debian/*
#            target/arm-unknown-linux-musleabi/release/rpmbuild/RPMS/armv7l/*
#            target/arm-unknown-linux-musleabihf/release/rpmbuild/RPMS/armv7hl/*
#            target/aarch64-unknown-linux-musl/release/rpmbuild/RPMS/aarch64/*
#            target/x86_64-unknown-linux-gnu/release/rpmbuild/RPMS/x86_64/*
#            scripts/*
#            scripts/aur/*.tar.gz
#          if-no-files-found: warn
#
#      # Development Release
#      - uses: "marvinpinto/action-automatic-releases@latest"
#        with:
#          repo_token: "${{ secrets.GITHUB_TOKEN }}"
#          automatic_release_tag: "latest"
#          title: "Development Build"
#          prerelease: true
#          draft: false
#          files: |
#            target/arm-unknown-linux-musleabi/debian/*
#            target/arm-unknown-linux-musleabihf/debian/*
#            target/aarch64-unknown-linux-musl/debian/*
#            target/x86_64-unknown-linux-gnu/debian/*
#            target/arm-unknown-linux-musleabi/release/rpmbuild/RPMS/armv7l/*
#            target/arm-unknown-linux-musleabihf/release/rpmbuild/RPMS/armv7hl/*
#            target/aarch64-unknown-linux-musl/release/rpmbuild/RPMS/aarch64/*
#            target/x86_64-unknown-linux-gnu/release/rpmbuild/RPMS/x86_64/*
#            scripts/*
#            scripts/aur/*.tar.gz
#
#      # Upload QiNiu nightly
#      - name: "Upload to QiNiu"
#        env:
#          QINIU_BUCKET: ${{ secrets.QINIU_BUCKET }}
#          QINIU_AK: ${{ secrets.QINIU_AK }}
#          QINIU_SK: ${{ secrets.QINIU_SK }}
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y unzip
#
#          if [ $(uname -m) == 'x86_64' ]; then
#            wget http://devtools.qiniu.com/qshell-linux-x64-v2.4.1.zip
#            unzip qshell-linux-x64-v2.4.1.zip
#            mv qshell-linux-x64-v2.4.1 qshell
#          else
#            wget http://devtools.qiniu.com/qshell-linux-x86-v2.4.1.zip
#            unzip qshell-linux-x86-v2.4.1.zip
#            mv qshell-linux-x86-v2.4.1 qshell
#          fi
#          chmod +x qshell
#          ./qshell account -w ${QINIU_AK} ${QINIU_SK} deploy-account
#
#          for f in $(find target -type f -name '*.deb') $(find target -type f -name '*.rpm') $(find scripts -name '*.tar.gz'); do
#            filename=${f##*/}
#            key=nightly/${filename}
#            ./qshell rput --overwrite ${QINIU_BUCKET} ${key} ${f}
#          done
#          for f in $(find scripts -name '*.sh' ); do
#            filename=${f##*/}
#            key=nightly/${filename}
#            ./qshell rput --overwrite --mimetype text/plain ${QINIU_BUCKET} ${key} ${f}
#          done
